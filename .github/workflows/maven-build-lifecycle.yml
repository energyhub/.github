name: Run Maven Build Lifecycle

on:
  workflow_call:
    secrets:
      JFROG_PASSWORD:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    inputs:
      ecr-repository:
        description: "Amazon ECR repository name, e.g. 'energyhub/mec', 'energyhub/uwp'"
        required: false
        type: string
      upload-artifacts:
        description: "Upload build artifacts. Includes upload of docker image to Amazon ECR"
        required: false
        default: false
        type: boolean
      artifact-paths:
        description: "Paths of additional artifacts to upload, if applicable"
        required: false
        type: string
        default: ""
      application-path:
        required: false
        default: server
        type: string
      jfrog-user:
        required: true
        type: string
    outputs:
      revision:
        description: "The semantic version resolved from the pom file"
        value: ${{ jobs.build-and-run-tests.outputs.revision }}
      image-tag:
        description: "The docker image tag"
        value: ${{ jobs.build-and-run-tests.outputs.image-tag }}

env:
  AWS_REGION: us-east-1

jobs:
  build-and-run-tests:
    runs-on: ubuntu-latest
    name: build-and-run-tests
    outputs:
      revision: ${{ steps.resolve-revision.outputs.revision }}
      image-tag: ${{ steps.build-image.outputs.image-tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Maven Setup
        uses: energyhub/.github/.github/actions/maven-setup@main
        with:
          jfrog-user: ${{ inputs.jfrog-user }}
          jfrog-password: ${{ secrets.JFROG_PASSWORD }}

      - name: Set a revision number
        id: resolve-revision
        run: echo "revision=$(source ./etc/ci/get_revision.sh && get_revision .)" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Run tests
        env:
          OCI_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: mvn -B verify

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        if: ${{ inputs.upload-artifacts }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ steps.resolve-revision.outputs.revision }}-${{ github.run_number}}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{ inputs.application-path }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          run: echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Upload artifacts from workflow
        if: ${{ inputs.artifact-paths != '' && inputs.upload-artifacts }}
        uses: actions/upload-artifact@v3
        with:
          path: ${{ inputs.artifact-paths }}

      - name: Upload reports to Codacy
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        if: "${{ env.CODACY_PROJECT_TOKEN != '' }}"
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          api-token: ${{ secrets.CODACY_PROJECT_TOKEN }}